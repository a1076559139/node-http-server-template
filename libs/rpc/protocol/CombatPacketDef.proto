package CombatPacketDef;

option optimize_for=LITE_RUNTIME;

import "BaseStruct.proto";
import "MessageType.proto";
import "RichTextDef.proto";
import "ValetBaseDef.proto";
import "BagOperation.proto";

message BuffInfo
{
    optional int32 buff_id = 1;         //状态id
    optional bytes buff_name = 2;       //状态名称(可选,没有的时候用默认的或者客户端已有的配置)
    optional bytes buff_icon = 3;       //状态图标id(可用于拼成下载链接.可选,没有的时候用默认的或者客户端已有的配置)
    optional int32 buff_lv = 4;         //状态等级
    optional int32 turn_remain = 5;     //剩余回合数(-1为无回合数限制, 0为消失)
    optional int32 count_remain = 6;    //剩余触发效果次数(-1为无次数限制, 0为消失)
}

message CombatTurnResultItem
{
    optional int64 max_hp = 2;      //最大hp
    optional int64 hp_chg = 3;      //hp变化
    optional bool critical = 4;     //暴击
    optional bool turn_defeat = 5;       //回合失败
    optional bool turn_success = 6;      //回合胜利
    optional bool final_defeat = 7;       //最终失败
    optional bool final_success = 8;      //最终胜利
    optional int32 strength_chg = 9;      //战斗力变化
    repeated BuffInfo buff_chg = 10;      //buff变化
}

message CombatTurnResult
{
    repeated CombatTurnResultItem result = 1;
}

enum CombatInstructionType
{
    ENUM_COMBAT_INSTRUCTION_ATTACK = 0;
    ENUM_COMBAT_INSTRUCTION_USE_ITEM = 1;
    ENUM_COMBAT_INSTRUCTION_DISPLAY = 2;
    ENUM_COMBAT_INSTRUCTION_SURRENDER = 3;
    ENUM_COMBAT_INSTRUCTION_PASSIVE_EFFECT = 4; //被动效果生效
}

message CombatAction
{
    optional int64 user_id = 1;                         //动作发起者id
    optional int32 action_type = 2;                     //动作类型
    optional bytes action_animation = 3;                //动作动画资源名称
    optional CombatTurnResultItem action_result = 4;
    optional bytes user_dialogue = 5;                   //角色台词
    optional int32 skill_id = 6;                        //使用的技能或者道具id,
                                                        //仅在action_type为ENUM_COMBAT_INSTRUCTION_DISPLAY时有效
    optional int32 skill_lv = 7;                        //使用的技能等级,
}

message CombatActionSegment
{
    repeated CombatAction action = 1;
    optional RichTextDef.RichTextMessage combat_log = 2;
}

message CombatActionTurn
{
    repeated CombatActionSegment segment = 1;
}


enum ItemType
{
    ENUM_ITEM_TYPE_NONE  	= 0;
    ENUM_ITEM_TYPE_ATTACK  	= 1;    //攻击
    ENUM_ITEM_TYPE_SUPPORT  = 2;    //辅助
    ENUM_ITEM_TYPE_SPECIAL  = 3;    //特殊
}

message ItemInfo
{
    optional ItemType item_type = 1;        //类型
    optional int32 item_id = 2;             //物品id
    optional int32 used_count = 3;          //可使用次数
    optional int32 loot_count = 4;          //偷来的物品数量
}

message SkillInfo
{
    optional int32 skill_id = 1;            //技能id
    optional int32 skill_lv = 2;            //技能等级
    repeated BagOperationPB.EquipAttrPB active_skill_attr  = 3;  // 技能属性加成
    optional bool is_weak = 4;
}

message UnitInfo{
    optional int64 user_id = 1;         //用户id
    optional int64 strength = 2;        //战斗力
    optional int64 hitpoint = 3;        //当前hp
    optional int64 max_hitpoint = 4;    //最大hp
    optional int32 level = 5;           //等级(先不填,由客户端请求total info获取)
    optional int32 icon_token = 6;      //头像token(同level)
    repeated BuffInfo buff = 7;         //状态
    repeated ItemInfo item = 8;         //道具
    repeated SkillInfo skill = 9;       //技能
    optional int64 reputation = 10;     //声望
    optional bytes nickname = 11;
    optional int32 gender = 12;
    optional int32 vip_level = 13;
}

enum CombatType
{
    ENUM_COMBAT_TYPE_NONE  	= -1;
    ENU_COMBAT_TYPE_DUEL    = 0;                //切磋
    ENU_COMBAT_TYPE_CAPTURE = 1;                //抓捕
    ENU_COMBAT_TYPE_RESCURE = 2;                //解救
    ENU_COMBAT_TYPE_DEFEND  = 3;                //偷窃被抓
    ENU_COMBAT_TYPE_STRUGGLE  = 4;              //反抗
    ENU_COMBAT_TYPE_CAPTURE_NPC = 5;            //抓捕npc
    ENU_COMBAT_TYPE_NEWBIE_CAPTURE_NPC = 6;     //抓捕npc(新手引导)
    ENU_COMBAT_TYPE_CAPTURE_FROM_OTHERS = 7;    //抢夺
    ENU_COMBAT_TYPE_JAIL = 108;                 //囚禁
    ENU_COMBAT_TYPE_JAIL_BREAK = 109;           //越狱
    ENU_COMBAT_TYPE_CAPTURE_WEB = 110;          //抓微信好友(新用户)
    ENU_COMBAT_TYPE_NEWBIE_CAPTURE_NPC_2 = 111; //抓捕npc(新手引导2)
    ENU_COMBAT_TYPE_JAIL_RESCURE = 112;
    ENU_COMBAT_TYPE_ROBBERY = 113;              //抢宝箱
    ENU_COMBAT_TYPE_NEWBIE_CAPTURE_NPC_3 = 114; //抓捕邻居(新手引导3)
    ENU_COMBAT_TYPE_CAPTURE_WEB_2 = 115;        //抓微信好友(老用户)
    ENU_COMBAT_TYPE_CAPTURE_QQ = 116;          //抓QQ好友(新用户)
    ENU_COMBAT_TYPE_CAPTURE_QQ_2 = 117;          //抓QQ好友(老用户)
}

enum CombatState
{
    ENUM_COMBAT_STATE_NONE     = -1;
    ENUM_COMBAT_STATE_UNDERWAY = 0;    //进行中
    ENUM_COMBAT_STATE_COMPLETE = 1;    //已结束
}

message CombatEnvironment
{
    optional int64 battlefield_id = 1;
    optional CombatType combat_type = 2;
    optional CombatState combat_state = 3;
    optional int32 turn = 4;
    optional int32 turn_end_time = 5;
    optional UnitInfo self_info = 6;
    optional UnitInfo peer_info = 7;
    optional CombatActionTurn last_action = 8;
    optional CombatTurnResult last_action_result = 9;
    repeated bytes combat_log = 10;
    optional int64 rescure_target_id = 11;
    optional int32 award_id = 12;
    optional bool self_surrender = 13;
    optional bool peer_surrender = 14;
    optional bool self_auto_combat = 15;
    optional bool peer_auto_combat = 16;
}


message UserStartCombatRq{
    optional int32 session_id = 1;
    optional int64 peer_id = 2;
    optional CombatType combat_type = 3 [default = ENUM_COMBAT_TYPE_NONE];
    optional uint32 slot_index = 4; // 槽位 据此创建跟班关系
    optional int32 retry_count = 5;   //之前失败的次数
    optional int64 peer_host_id = 6; //目标的囚禁者id,仅在combat_type为ENU_COMBAT_TYPE_JAIL_RESCURE时生效
    optional bool force_start = 7;
    optional UserCombatCost force_start_cost = 8;
	optional int32 protocol = 9;//客户端版本号
}

message UserStartCombatRs{
    optional int32 session_id = 1;
    optional int64 peer_id = 2;
    optional CombatType combat_type = 3 [default = ENUM_COMBAT_TYPE_NONE];
    optional MessageType.ErrorInfo error = 4;
    optional CombatEnvironment combat_env = 5;
    optional bool can_force_start = 6;
    repeated UserCombatCost force_start_cost = 7;
    optional uint32 slot_index = 8; // 槽位 据此创建跟班关系
    optional int32 retry_count = 9;   //之前失败的次数
    optional int64 peer_host_id = 10; //目标的囚禁者id,仅在combat_type为ENU_COMBAT_TYPE_JAIL_RESCURE时生效
}

message UserEnterCombatId{
    optional int64 offender_id = 1;
    optional int64 battlefield_id = 2;
    optional CombatType combat_type = 4 [default = ENUM_COMBAT_TYPE_NONE];
    optional int64 defender_id = 3;
    optional int64 rescure_target_id = 5;
    optional int32 award_id = 6;
}

message UserEnterCombatRq{
    optional int32 session_id = 1;
    optional int64 battlefield_id = 2;
    optional bool manual = 3; //手动操作
}

message UserEnterCombatRs{
    optional int32 session_id = 1;
    optional int64 battlefield_id = 2;
    optional MessageType.ErrorInfo error = 3;
    optional CombatEnvironment combat_env = 4;
}

message UserCombatAnimationCompleteRq{
    optional int32 session_id = 1;
    optional int64 battlefield_id = 2;
    optional int32 turn = 3;
}

message UserCombatAnimationCompleteRs{
    optional int32 session_id = 1;
    optional int64 battlefield_id = 2;
    optional int32 turn = 3;
    optional MessageType.ErrorInfo error = 4;
}

message UserCombatSwitchAutoRq{
    optional int32 session_id = 1;
    optional int64 battlefield_id = 2;
    optional bool start_auto = 3 [default = false];
}

message UserCombatSwitchAutoRs{
    optional int32 session_id = 1;
    optional int64 battlefield_id = 2;
    optional bool start_auto = 3 [default = false];
    optional MessageType.ErrorInfo error = 4;
}

message UserCombatSwitchAutoId{
    optional int64 user_id = 1;
    optional int64 battlefield_id = 2;
    optional bool start_auto = 3 [default = false];
}

message CombatInstruction
{
    optional CombatInstructionType type = 1 [default = ENUM_COMBAT_INSTRUCTION_ATTACK];
    optional int32 item_id = 2;
}

message UserCombatInstructionRq{
    optional int32 session_id = 1;
    optional int64 battlefield_id = 2;
    optional int32 turn = 3;
    optional CombatInstruction instruction = 4;
}

message UserCombatInstructionRs{
    optional int32 session_id = 1;
    optional int64 battlefield_id = 2;
    optional int32 turn = 3;
    optional CombatInstruction instruction = 4;
    optional MessageType.ErrorInfo error = 5;
}

message UserCombatTurnResultId
{
    optional CombatEnvironment result = 1;
}

message AwardServentFragments
{
    optional int32 role_id = 1;
    optional int32 count = 2;
}

message UserStrengthAwardStatistics
{
    optional int32 total_count = 1;
    optional int32 remain_count = 2;
    optional int32 refresh_time = 3;
}

message UserCombatAward
{
    optional bool success = 1;
    optional int64 strength_chg = 2;
    repeated int64 award_servent = 3;
    repeated int64 lost_servent =4;
    repeated AwardServentFragments award_fragment = 5;
    repeated ValetBaseDef.ValetAwardItem awards = 6; // 奖励列表 用户顺东西发起PK 打赢了生效
    optional int64 strength_base = 7;
    optional UserStrengthAwardStatistics stat = 8;
    optional int64 exp_chg = 9;
    optional int64 reputation_change = 10;
    optional int64 reputation_base = 11;
    optional int64 exp_base = 12;
}

enum ENUM_COMBAT_COST_TYPE
{
    ENUM_COST_TYPE_PRIZECASH = 0;       //福利元宝
    ENUM_COST_TYPE_CASH      = 1;       //元宝
    ENUM_COST_TYPE_DIAMOND   = 2;       //钻石
    ENUM_COST_TYPE_POTENTIAL = 3;       //潜能
    ENUM_COST_TYPE_ENERGY    = 4;       //体力
    ENUM_CASH_TYPE_GOLD_COIN = 6;       //金币
}

message UserCombatCost
{
    optional ENUM_COMBAT_COST_TYPE type = 1;
    optional int64 value = 2;
}

message UserCombatFinalResultId
{
    optional int64 battlefield_id = 1;
    optional int64 offender_id = 2;
    optional UserCombatAward offender_award = 3;
    optional int64 defender_id = 4;
    optional UserCombatAward defender_award = 5;
    optional bool offender_surrender = 6;
    optional bool defender_surrender = 7;
    optional uint32 slot_index = 8;
    optional RichTextDef.RichTextBlock hint = 9;
    optional int32 retry_energy = 10;
    repeated UserCombatCost retry_cost = 11;
    optional int32 total_try_count = 12;
    optional bytes fight_awards = 13; // 战斗结果数据;不同战斗类型对应不同数据包
}

message UserStrengthAwardStatRq
{
}

message UserStrengthAwardStatRs
{
    optional MessageType.ErrorInfo error = 1;
    optional UserStrengthAwardStatistics stat = 3;
}
